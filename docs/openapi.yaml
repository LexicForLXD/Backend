openapi: 3.0.0
info:
  title: Lexic API
  version: 1.0.0
  description: Central set of REST Api endpoints to manage multi LXD Host environments
paths:
  /backups:
    get:
      tags:
        - backups
      summary: Get all successful Backups
      operationId: 'AppBundle\Controller\BackupController::getAllBackups'
      responses:
        "200":
          description: List of all successful Backups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backup"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Stores a new manual backup.
      tags:
        - backups
      operationId: 'AppBundle\Controller\BackupController::storeBackupAction'
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                destination:
                  type: integer
                containerIds:
                  type: array
                  items:
                    type: integer
                name:
                  type: string
              required:
                - destination
                - containerIds
                - name
            example:
              destination: 1
              containerIds:
                - 1
                - 2
              name: justabackup
      responses:
        "201":
          description: The new Backup object was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: The backup token is invalid
  /backups/{id}:
    get:
      tags:
        - backups
      summary: Get single Backup by it's id
      operationId: 'AppBundle\Controller\BackupController::getBackupById'
      parameters:
        - name: id
          in: path
          description: Id of the Backup
          required: true
          schema:
            type: integer

      responses:
        "200":
          description: Single Backup with the provided id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backup"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - backups
      summary: Delete an existing Backup
      operationId: 'AppBundle\Controller\BackupController::deleteBackupEntry'
      parameters:
        - name: id
          in: path
          description: Id of the Backup
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Backup for the provided id deleted
        "404":
          $ref: "#/components/responses/NotFound"
  /webhooks/backups:
    post:
      tags:
        - backups
      summary: Webhook to create a new Backup object based on a Backup Schedule
      operationId: 'AppBundle\Controller\BackupController::backupCreationWebhook'
      parameters:
        - name: token
          in: query
          description: The authorization token set in the Backup Schedule
          required: true
          schema:
            type: string

      responses:
        "201":
          description: The new Backup object was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backup"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: The backup token is invalid

  /schedules:
    get:
      tags:
        - backupSchedules
      summary: Get all successful Backups
      operationId: 'AppBundle\Controller\BackupScheduleController::getAllBackups'
      responses:
        "200":
          description: List of all BackupSchedules
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backupSchedule"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      summary: Stores a new backupSchedule.
      tags:
        - backupSchedules
      operationId: 'AppBundle\Controller\BackupScheduleController::storeBackupAction'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                executionTime:
                  type: string
                  enum:
                    - "daily"
                    - "weekly"
                    - "monthly"
                destination:
                  type: integer
                containerIds:
                  type: array
                  items:
                    type: integer
              required:
                - destination
                - containerIds
                - name
                - executionTime
            example:
              name: justabackup
              description: Jus a description.
              destination: 1
              containerIds:
                - 1
                - 2
              executionTime: daily
      responses:
        "201":
          description: The new BackupSchedule object was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/backupSchedule"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          description: The backup token is invalid

components:
  #Models
  schemas:
    backup:
      type: object
      properties:
        id:
          type: integer
          example: 1
        timestamp:
          type: string
          format: date-time
          example: "2018-03-10T22:40:28+00:00"
        destinationId:
          type: integer
          example: 1
        containerIds:
          type: array
          items:
            type: integer
          example: [1]
        backupScheduleId:
          type: integer
          example: 2
      example:
        id: 1
        timestamp: 2018-03-10T22:40:28+00:00
        destinationId: 1
        containerIds: [1, 2]
        backupScheduleId: 1
    backupDestination:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "DestName"
        description:
          type: string
          example: "DestDesc"
        path:
          type: string
          example: "/path/to/folder"
        hostname:
          type: string
          example: "192.168.10.10"
        protocol:
          type: string
          example: "sftp"
        username:
          type: string
          example: "username"
        password:
          type: string
          example: "password"
      type: object
    backupSchedule:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "DestName"
        description:
          type: string
          example: "DestDesc"
        executionTime:
          type: string
          example: "daily"
        destination:
          $ref: "#/components/schemas/backupDestination"
    container:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hostId:
          type: integer
          example: 1
        name:
          type: string
          example: C1
        ephemeral:
          type: boolean
          example: false
        architecture:
          type: string
          example: x86_64
        config:
          type: object
        expandedConfig:
          type: object
        devices:
          type: object
        expandedDevices:
          type: object
        profileIds:
          type: array
          items:
            type: integer
        state:
          type: string
          example: running
    containerStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nagiosEnabled:
          type: boolean
          example: true
        nagiosName:
          type: string
          example: ContainerWeb1
        nagiosUrl:
          type: string
          example: https://nagios.example.com/pnp4nagios/
        checkName:
          type: string
          example: check_http
        sourceNumber:
          type: integer
          example: 1
    host:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ipv4:
          type: string
          example: "192.168.10.10"
        ipv6:
          type: string
          example: fe80::50
        domainName:
          type: string
          example: host.domain.de
        mac:
          type: string
        port:
          type: integer
          example: 8443
        authenticated:
          type: boolean
          example: false
        containerIds:
          type: array
          items:
            type: integer
          example: [1, 2]
        storagePoolIds:
          type: array
          items:
            type: integer
          example: [3, 4]
    hostStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nagiosEnabled:
          type: boolean
          example: true
        nagiosName:
          type: string
          example: Host1
        nagiosUrl:
          type: string
          example: https://nagios.example.com/pnp4nagios/
        checkName:
          type: string
          example: check_http
        sourceNumber:
          type: integer
          example: 1
    image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hostId:
          type: integer
          example: 1
        fingerprint:
          type: string
          example: 459b996bc8db8701fcbe87c09dbb7412c4e52858f40bd60b3a99ce329d09850f
        architecture:
          type: string
          example: x86_64
        size:
          type: integer
        public:
          type: boolean
          example: false
        filename:
          type: string
          example: imageName
        finished:
          type: boolean
          example: false
        aliases:
          type: array
          items:
            $ref: "#/components/models/imageAlias"
        properties:
          type: object
        containerId:
          type: array
          items:
            type: integer
    imageAlias:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Alias1
        description:
          type: string
          example: Just a description
    profile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hostId:
          type: integer
          example: 1
        name:
          type: string
          example: Profile1
        description:
          type: string
          example: Just a description+
        config:
          type: object
        devices:
          type: object
        containerIds:
          type: array
          items:
            type: integer
    storagePool:
      type: object
      properties:
        id:
          type: integer
          example: 1
        hostId:
          type: integer
          example: 1
        name:
          type: string
          example: pool1
        driver:
          type: string
          example: zfs
        config:
          type: object
    job:
      type: object
      properties:
        id:
          type: integer
        args:
          type: string
        className:
          type: string
        crcHash:
          type: string
        createdAt:
          type: timestamp
        startedAt:
          type: timestamp
        finishedAt:
          type: timestamp
        updatedAt:
          type: timestamp
        elapsed:
          type: number
        exceptions:
          type: integer
        failures:
          type: integer
        retries:
          type: integer
        stalls:
          type: integer

        maxExceptions:
          type: integer
        maxFailures:
          type: integer
        maxRetries:
          type: integer
        maxStalls:
          type: integer
        method:
          type: string
        runId:
          type: string
        status:
          type: string
        whenUs:
          type: integer
        workerName:
          type: string

  #Responses
  responses:
    NotFound:
      description: Entity was not found.
      content:
        application/json:
          schema:
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: No <entity> for ID <ID> found
    BadRequest:
      description: There were some errors in the submitted data.
      content:
        application/json:
          schema:
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: object
                    properties:
                      nameOfParameter:
                        type: string
                        example: The key is the parameter which has an error. The value is error.
